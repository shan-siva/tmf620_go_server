/*
 * Product Catalog Management
 *
 * ## TMF API Reference: TMF620 - Product Catalog Management  ### Release : 20.5 - March 2021  Product Catalog API is one of Catalog Management API Family. Product Catalog API goal is to provide a catalog of products.   ### Operations Product Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * API version: 4.1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"

	//"net/http/httputil"

	utils "tmf620/utils"

	mgo "tmf620/mongo"
)

func CreateCategory(w http.ResponseWriter, r *http.Request) {

	var categoryCreate CategoryCreate

	fmt.Println("CreateCategory")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	fmt.Printf("Request:\n%s\n", utils.PrintRequest(r))

	/*
			//https://go.dev/src/net/http/httputil/example_test.go
			dump, err := httputil.DumpRequest(r, true)

			if err != nil {

				fmt.Println(err)

				http.Error(w, fmt.Sprint(err), http.StatusInternalServerError)

				return

			}
			fmt.Printf("Request:\n%s\n", r.Body)
			//fmt.Fprintf(w, "%q", dump)

			//request := string(dump)

		// decoding squad struct from json string

		//err = nil
		err := json.Unmarshal([]byte(r.Body), &categoryCreate)

		if err != nil {
			// print out if error is not nil
			fmt.Println(err)
		}
	*/
	// Use http.MaxBytesReader to enforce a maximum read of 1MB from the
	// response body. A request body larger than that will now result in
	// Decode() returning a "http: request body too large" error.
	r.Body = http.MaxBytesReader(w, r.Body, 1048576)

	// Setup the decoder and call the DisallowUnknownFields() method on it.
	// This will cause Decode() to return a "json: unknown field ..." error
	// if it encounters any extra unexpected fields in the JSON. Strictly
	// speaking, it returns an error for "keys which do not match any
	// non-ignored, exported fields in the destination".
	dec := json.NewDecoder(r.Body)
	dec.DisallowUnknownFields()

	err := dec.Decode(&categoryCreate)
	if err != nil {
		// print out if error is not nil
		fmt.Println(err)
	}

	// printing details of struct
	fmt.Println("categoryCreate is:", categoryCreate)
	result := mgo.InsertOne("Category", categoryCreate)

	/*
		var result *mongo.InsertOneResult
		var collection *mongo.Collection
		var ctx = context.Background()

		client, err := mgo.GetMongoClientDefault()

		collection = client.Database("tmf").Collection("test")
		fmt.Printf("collection Success %s\n", collection.Name())

		if result, err = collection.InsertOne(ctx, categoryCreate); err != nil {
			fmt.Printf("Error when InsertOne %s \n", err)
		}
	*/
	fmt.Printf("Inserted Success %s\n", result.InsertedID)

	w.WriteHeader(http.StatusOK)
}

func DeleteCategory(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func ListCategory(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PatchCategory(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func RetrieveCategory(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
